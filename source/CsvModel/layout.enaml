# One of the possible layouts for the editor

import os
from workspace_handler import WorkspaceHandler
from enaml.stdlib.radio_group import RadioGroup
from enaml.stdlib.list_model import ListModel

from selection_handler import ScriptSelection

enamldef ConfigureSelection(Dialog):
    
    attr config_workspace
    title = 'Configure Selection'
    
    Container:
        
        TableView:
            item_model = config_workspace
        
        Form:
            PushButton:
                text = 'OK'
                clicked ::
                    accept()
            PushButton:
                text = 'Cancel'
                clicked ::
                    reject()


enamldef EditPlotDialog(Dialog):
    
    attr xyplot_handler
    attr show_grid
    attr plot_visible
    attr plot_type_disc_
    
    Container:
        constraints = [vbox(edit_plot_traits,edit_plot_form)]
        TraitsUIItem:
            id: edit_plot_traits
            model := xyplot_handler
        
        Form:
            id: edit_plot_form
            
            CheckBox:
                id: show_grid_toggle
                text = 'Show Grid'
                checked := show_grid
            CheckBox:
                id: plot_visible_toggle
                text = 'Plot Visible'
                checked := plot_visible
            Label:
                text = 'Plot Type'
            RadioGroup:
                id: plot_type_radio
                RadioButton:
                    id: plot_type_disc
                    text = 'Discrete'
                    checked := plot_type_disc_
                RadioButton:
                    id: plot_type_cont
                    text = 'Continuous'
            PushButton:
                text = 'Ok'
                clicked ::
                    accept()
            PushButton:
                text = 'Cancel'
                clicked ::
                    reject()


enamldef Loader(Container):
    
    constraints = [
        vbox(data_type_rb,hbox(lbl, fld, load_button, save_button,
                               add_another_csv_pb)),
        width == 500
        ]
    
    Label:
        id: lbl
        text = 'Filename'
    
    Field:
        id: fld
        value << model.filename
    
    PushButton:
        id: load_button
        text = 'Load'
        clicked::
            dlg = FileDialog(
                title = 'Load file',
                filters = ['CSV files (*.csv)'],
                directory = os.path.dirname(
                    os.path.join('..','..','datasets','sample.csv'))
                
            )
            dlg.show()
            if dlg.result == 'accepted':
                model.filename = dlg.path
                xyplot_handler.AS_PANDAS_DATAFRAME = model.AS_PANDAS_DATAFRAME
    
    RadioGroup:
        id: data_type_rb
        RadioButton:
            id: as_pandas
            text = 'As Pandas DataFrame'
            checked := model.AS_PANDAS_DATAFRAME
        RadioButton:
            id: as_nparray
            text = 'As numpy.ndarray'
    PushButton:
        id: save_button
        text = 'Save as csv'
        clicked ::
            dlg = FileDialog(
                title = 'Save file',
                mode = 'save',
                filters = ['CSV (*.csv)'],
                directory = os.path.dirname(
                    os.path.join('..','..','datasets','sample.csv'))
                )
            dlg.show()
            if dlg.result == 'accepted':
                model.save_filename = dlg.path
                model.save_as()
    PushButton:
        id: add_another_csv_pb
        constraints = [height==save_button.height,
                       width == 30]
        text = '+'
        clicked ::
            pass


enamldef ControlPanel(Container):
    
    Loader:
        id: loader


enamldef Main(MainWindow):
    id: main_window
    attr model
    attr xyplot_handler
    attr imageplot_handler
    attr pcaplot_handler
    attr script_selection = ScriptSelection({}, editable=True)
    attr regressplot
    attr histplot_handler
    attr kmeans_plot
    attr text_class
    
    Container:
        constraints = [
            
                hbox(left_view,tab_parent),
                
            ]
        TabGroup:
            id: left_view
            Tab:
                title << model.filename.split('/')[len(model.filename.split('/'))-1]
                constraints = [
                    vbox(tv_area,control_panel),
                    512>=tv_area.height >= 200,
                    512>=tv_area.width >= 200,
                    control_panel.width == tv_area.width,               
                ]
                TableView:
                    id: tv_area
                    item_model << model.table_model
                    BaseSelectionModel:
                        id: bsm
                        #selection_behavior = 'columns'
                ControlPanel:
                    id: control_panel
        TabGroup:
            id: tab_parent
            Tab:
                id: data_viz
                title = 'Data Visualization'
                TabGroup:
                    Tab:
                        id: x_vs_y
                        title = 'X vs Y'
                        Container:
                            constraints = [
                                hbox(
                                    vbox(x_vs_y_plot, hbox(grid_toggle, chaco_tools_rb)),
                                    vbox(plot_properties_traits, plot_radiogroup,
                                         plot_name_form,add_xyplot_pb,
                                         plot_list_view, edit_plots_pb,
                                         remove_selected_plots
                                         )
                                ),
                                plot_radiogroup.width == plot_properties_traits.width,
                                plot_name_form.width == plot_radiogroup.width
                            ]
                            EnableCanvas:
                                id: x_vs_y_plot
                                constraints = [
                                    256<=height<=512, 256<=width<=512
                                    ]
                                
                                component << xyplot_handler.container
                            TraitsUIItem:
                                id: plot_properties_traits
                                model = xyplot_handler
                            Form:
                                id: plot_radiogroup
                                Label:
                                    text = 'Plot Type'
                                RadioGroup:                                
                                    RadioButton:
                                        id: plot_type_disc
                                        text = 'Discrete'
                                        checked := xyplot_handler.plot_type_disc
                                    RadioButton:
                                        id: plot_type_cont
                                        text = 'Continuous'
                            Form:
                                id: plot_name_form
                                Label:
                                    text = 'Plot Name'
                                Field:
                                    id: plot_name
                                    value = ''
                            PushButton:
                                id: add_xyplot_pb
                                text = 'Plot From Selection'
                                clicked ::
                                    if xyplot_handler.AS_PANDAS_DATAFRAME:
                                        xyplot_handler.data_frame = \
                                        model.data_frame
                                    else:
                                        xyplot_handler.table = model.table
                                    xyplot_handler.selection_handler.current_selection \
                                    = bsm.get_selection()
                                    
                                    
                                    xyplot_handler.add_xyplot_selection(
                                        plot_name.value)
                                    plot_list_view.item_model = ListModel(
                                        xyplot_handler.plot_list_view.keys())
                            PushButton:
                                id: remove_selected_plots
                                text = 'Remove Selected Plots'
                                clicked ::
                                    xyplot_handler.remove_selected_plots(
                                        bsm_plotlist.get_selection()
                                    )
                                    plot_list_view.item_model = ListModel(
                                        xyplot_handler.plot_list_view.keys())
                            PushButton:
                                id: edit_plots_pb
                                text = 'Edit Plot Traits'
                                clicked ::
                                    xyplot_handler.selection_handler.current_selection = \
                                        bsm_plotlist.get_selection()
                                    dlg = EditPlotDialog(
                                        xyplot_handler = xyplot_handler,
                                        show_grid = True,
                                        plot_visible = True,
                                        plot_type_disc_ = \
                                            xyplot_handler.plot_type_disc
                                    )
                                    dlg.show()
                                    if dlg.result == 'accepted':
                                        xyplot_handler.edit_selection(
                                            dlg.show_grid, dlg.plot_visible,
                                            dlg.plot_type_disc_
                                        )
                                    
                                    
                                    
                            ListView:
                                id: plot_list_view
                                item_model = ListModel(
                                    xyplot_handler.plot_list_view.keys())
                                BaseSelectionModel:
                                    id: bsm_plotlist
                            CheckBox:
                                id: grid_toggle
                                text = 'Show Grid'
                                checked = True
                                toggled ::
                                    xyplot_handler.grid_toggle(
                                        grid_toggle.checked)
                            
                            
                            RadioGroup:
                                id: chaco_tools_rb
                                RadioButton:
                                    id: drag_zoom_cb
                                    text = 'Drag Zoom'
                                RadioButton:
                                    id: pan_tool_cb
                                    text = 'Pan Tool'
                        
                    Tab:
                        title = 'Image Plot'
                        Container:
                            constraints = [
                                hbox(image_plot, imageplot_pb)
                            ]
                            EnableCanvas:
                                id: image_plot
                                constraints = [
                                    height == 512,
                                    width == 512
                                ]
                                component << imageplot_handler.container
                            PushButton:
                                id: imageplot_pb
                                text = 'Use Selection'
                                clicked ::
                                    imageplot_handler.table = model.table
                                    imageplot_handler.selection_handler.current_selection = \
                                        bsm.get_selection()
                                    imageplot_handler.selection_handler.create_selection()
                                    
                                    imageplot_handler.draw_image_plot()
                                    imageplot_handler.selection_handler.flush()

                    Tab:
                        
                        title = 'PC Plot'
                        Container:
        
                            constraints = [
                                hbox(pca_plot_canvas, pcaplot_pb)
                            ]
                            
                            EnableCanvas:
                                id: pca_plot_canvas
                                constraints = [height==512, width==512]
                                component << pcaplot_handler.container
                            
                            PushButton:
                                id: pcaplot_pb
                                text = 'Use Selection'
                                clicked ::
                                    pcaplot_handler.table = model.table
                                    pcaplot_handler.selection_handler.current_selection = \
                                        bsm.get_selection()
                                    pcaplot_handler.draw_pc_plot()
                                    pcaplot_handler.selection_handler.flush()
                    Tab:
                        title = 'Histogram'
                        Container:
                            id: hist_container

                            constraints = [
                                vbox(hist_plot_container,
                                     nbins_slider, draw_hist_pb)
                            ]
                            EnableCanvas:
                                id: hist_plot_container
                                constraints = [
                                    256<=width<=512,
                                    256<=height<=512,
                                ]
                                component << histplot_handler.container
                            Slider:
                                id: nbins_slider
                                minimum = 10
                                maximum = 1000
                                value >> histplot_handler.nbins
                            PushButton:
                                id: draw_hist_pb
                                text = 'Use Selection'
                                clicked ::
                                    histplot_handler.AS_PANDAS_DATAFRAME = \
                                        model.AS_PANDAS_DATAFRAME
                                    if histplot_handler.AS_PANDAS_DATAFRAME:
                                        histplot_handler.data = model.data_frame
                                    else:
                                        histplot_handler.data = model.table
                                    histplot_handler.selection_handler.current_selection = \
                                        bsm.get_selection()
                                    histplot_handler.draw_histogram()
            Tab:
                id: data_analysis
                title = 'Data Analysis'
                TabGroup:
                    Tab:
                        title = 'Descriptive Stats'
                        Container:
                            constraints = [vbox(params_form,params_pb)]
                            GroupBox:
                                id: params_form
                                Form:
                                    Label:
                                        text = 'Sum'
                                    Label:
                                        text << str(model.selection_sum)
                                    Label:
                                        text = 'Mean'
                                    Label:
                                        text << str(model.selection_mean)
                                    Label:
                                        text = 'Variance'
                                    Label:
                                        text << str(model.selection_var)
                                    Label:
                                        text = 'Standard Deviation'
                                    Label:
                                        text << str(model.selection_std)
                                    Label:
                                        text = 'Maximum'
                                    Label:
                                        text << str(model.selection_max)
                                    Label:
                                        text = 'Minimum'
                                    Label:
                                        text << str(model.selection_min)
                                    Label:
                                        text = 'Covariance'
                                    Label:
                                        text << str(model.selection_cov)
                            PushButton:
                                id: params_pb
                                text = 'Use Selection'
                                clicked ::
                                    model.selection_handler.current_selection \
                                    = bsm.get_selection()
                                    model.calculate_selection_params()
                    Tab:
                        title = 'Regression'
                        Container:
                            constraints = [vbox(regression_plot,
                                                regress_plot_pb)]
                            EnableCanvas:
                                id: regression_plot
                                constraints = [
                                    256<=height<=512, 256<=width<=512
                                ]
                                component << regressplot.container
                            PushButton:
                                id: regress_plot_pb
                                text = 'Use Selection'
                                clicked ::
                                    if model.AS_PANDAS_DATAFRAME:
                                        regressplot.data = model.data_frame
                                    else:
                                        regressplot.data = model.table
                                    regressplot.selection_handler.current_selection = \
                                        bsm.get_selection()
                                    regressplot.fit_selection()
                                    regressplot.plot_fits()
                                
                    Tab:
                        title = 'K-means Clustering'
                        Container:
                            constraints = [
                                vbox(kmeans_plot_canvas,
                                     kmeans_params_form, kmeans_pb 
                                     )
                            ]
                            EnableCanvas:
                                id: kmeans_plot_canvas
                                constraints = [
                                    256<=height<=512, 256<=width<=512
                                ]
                                component << kmeans_plot.container
                            Form:
                                id: kmeans_params_form
                                Label:
                                    text = 'No. of Clusters'
                                Slider:
                                    id: n_clusters_slider
                                    minimum = 2
                                    maximum = 10
                                Label:
                                    text = 'No. of Iterations'
                                Slider:
                                    id: max_iter_slider
                                    minimum = 10
                                    maximum = 500
                                Label:
                                    text = 'Columns to omit'
                                Field:
                                    id: kmeans_col_omit
                                    
                            PushButton:
                                id: kmeans_pb
                                text = 'Plot Clusters'
                                clicked ::
                                    to_omit = str(kmeans_col_omit.value)
                                    to_omit = to_omit.split(',')
                                    kmeans_plot.to_omit = to_omit
                                    kmeans_plot.n_clusters = n_clusters_slider.value
                                    if not model.AS_PANDAS_DATAFRAME:
                                        kmeans_plot.data = model.table
                                        kmeans_plot.create_dataset()
                                        kmeans_plot.plot_clusters()
                                

            Tab:
                id: other_ops_tab
                title = 'Other'
                Container:
                    constraints = [
                        vbox(hbox(sorting_ops,other_other),use_selection_other,
                             map_to_unique, norm_selection, del_row_pb)
                    ]
                    GroupBox:
                        id: sorting_ops
                        title = 'Sort Rows / Columns'
                        Container:
                            constraints = [
                                hbox(vbox(row_col_sort_select,asc_desc_sort),
                                          sort_button)
                            ]
                            RadioGroup:
                                id: row_col_sort_select
                                RadioButton:
                                    text = 'Row'
                                RadioButton:
                                    text = 'Column'
                            RadioGroup:
                                id: asc_desc_sort
                                RadioButton:
                                    text = 'Ascending'
                                RadioButton:
                                    text = 'Descending'
                            PushButton:
                                id: sort_button
                                text = 'Sort'
                                clicked ::
                                    pass
                    GroupBox:
                        id: other_other
                        Form:
                            Label:
                                text = 'No. of Items'
                            Label:
                                text << str(model.column_length)
                            Label:
                                text = 'Unique Items'
                            Label:
                                text << str(model.unique_items_nos)
                    PushButton:
                        id: use_selection_other
                        text = 'Use Selection'
                        clicked ::
                            model.selection_handler.current_selection = \
                                bsm.get_selection()
                            model.string_ops()
                    PushButton:
                        id: map_to_unique
                        text = 'Map to Integers'
                        clicked ::
                            model.selection_handler.current_selection = \
                                bsm.get_selection()
                            model.map_to_unique()
                    PushButton:
                        id: norm_selection
                        text = 'Normalize Selection'
                        clicked ::
                            model.selection_handler.current_selection\
                                = bsm.get_selection()
                            model.normalize_selection()
                    PushButton:
                        id: del_row_pb
                        text = 'Delete Row/Column'
                        clicked ::
                            model.selection_handler.current_selection = \
                                bsm.get_selection()
                            model.delete_rowcol()
                            

            Tab:
                title = 'Scripting'
                Container:
                    constraints = [
                        hbox(vbox(text_editor, use_selection_script,
                                  script_run_pb),
                        workspace_view)
                    ]
                    TextEditor:
                        id: text_editor
                    TableView:
                        id: workspace_view
                        item_model = model.workspace_handler
                    PushButton:
                        id: script_run_pb
                        text = 'Run'
                        clicked ::
                            model.script_handler.script = \
                                text_editor.get_text()
                            model.script_handler.exec_script()
                            model.workspace_handler = WorkspaceHandler(
                                model.script_handler.my_locals)
                            workspace_view.item_model = model.workspace_handler
                    PushButton:
                        id: use_selection_script
                        text = 'Use Selection'
                        clicked ::
                            model.selection_handler.current_selection = \
                                bsm.get_selection()
                            model.selection_handler.create_selection()
                            script_selection.selection_list = \
                                model.selection_handler.selected_indices
                            script_selection.create_selection_dict()
                            dlg = ConfigureSelection(
                                config_workspace=script_selection
                            )
                            dlg.show()
                            if dlg.result=='accepted':
                                var_dict = script_selection.add_to_workspace()
                                model.add_uservariables(var_dict)
                                script_selection.flush()
            Tab:
                title = 'Text Processing'

                Container:
                    constraints = [
                        hbox(simple_class_params,vbox(tfidf_pb,train_class_pb,
                             test_class_pb))
                    ]
                    
                    Form:
                        id: simple_class_params
                        Label:
                            text = 'Select Classifier'
                        ComboBox:
                            id: classifier_select_list
                            items = ['LinearSVC','Perceptron','RidgeClassifier',
                                     'SGDClassifier']
                            value >> text_class.classifier_select
                        Label:
                            text = 'Training Data Length'
                        Field:
                            value := text_class.train_length
                        Label:
                            text = 'Target Column'
                        Field:
                            value := text_class.target_col_no
                        Label:
                            text = 'Classifier Score'
                        Label:
                            #constraints = [width==classifier_select_list.width]
                            text << str(text_class.classifier_score)
                    PushButton:
                        id: tfidf_pb
                        text = 'Tokenize - Bag of Words'
                        clicked ::
                            text_class.selection_handler.current_selection = \
                                bsm.get_selection()
                            text_class.data_frame = model.data_frame
                            text_class.create_dataset()
                            text_class.text_vectorize()

                    PushButton:
                        id: train_class_pb
                        text = 'Train Classifier'
                        clicked ::
                            text_class.select_classifier()
                            text_class.train_classifier()
                    PushButton:
                        id: test_class_pb
                        text = 'Test Classifier'
                        clicked ::
                            text_class.test_classifier()
                        