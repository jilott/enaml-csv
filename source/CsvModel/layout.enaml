# One of the possible layouts for the editor

import os
from workspace_handler import WorkspaceHandler
from enaml.stdlib.radio_group import RadioGroup
from enaml.stdlib.list_model import ListModel

from selection_handler import ScriptSelection

enamldef ConfigureSelection(Dialog):
    
    attr config_workspace
    title = 'Configure Selection'
    
    Container:
        
        TableView:
            item_model = config_workspace
        
        Form:
            PushButton:
                text = 'OK'
                clicked ::
                    accept()
            PushButton:
                text = 'Cancel'
                clicked ::
                    reject()




enamldef Loader(Container):
    
    constraints = [
        vbox(data_type_rb,hbox(lbl, fld, load_button, save_button)),
        width == 500
        ]
    
    Label:
        id: lbl
        text = 'Filename'
    
    Field:
        id: fld
        value << model.filename
    
    PushButton:
        id: load_button
        text = 'Load'
        clicked::
            dlg = FileDialog(
                title = 'Load file',
                filters = ['CSV files (*.csv)'],
                directory = os.path.dirname(
                    os.path.join('..','..','datasets','sample.csv'))
                
            )
            dlg.show()
            if dlg.result == 'accepted':
                model.filename = dlg.path
                xyplot_handler.AS_PANDAS_DATAFRAME = model.AS_PANDAS_DATAFRAME
    
    RadioGroup:
        id: data_type_rb
        RadioButton:
            id: as_pandas
            text = 'As Pandas DataFrame'
            checked := model.AS_PANDAS_DATAFRAME
        RadioButton:
            id: as_nparray
            text = 'As numpy.ndarray'
    PushButton:
        id: save_button
        text = 'Save as csv'
        clicked ::
            dlg = FileDialog(
                title = 'Save file',
                mode = 'save',
                filters = ['CSV (*.csv)'],
                directory = os.path.dirname(
                    os.path.join('..','..','datasets','sample.csv'))
                )
            dlg.show()
            if dlg.result == 'accepted':
                model.save_filename = dlg.path
                model.save_as()


enamldef ControlPanel(Container):
    
    Loader:
        id: loader


enamldef HistogramContainer(Container):
    
    Container:
    
        constraints = [
            hbox(histogram_plot,hist_control)
        ]
        
        EnableCanvas:
            id: histogram_plot
            constraints = [
                width <= 512,
                height <= 512
            ]
            
            component << model.hist_plot
    
        Container:
            id: hist_control
            Slider:
                id: hist_nbins_slider
                minimum = 10
                maximum = 1000
                value >> int(model.hist_nbins)
            RadioGroup:
                id: hist_radio
                RadioButton:
                    text = 'Row'
                RadioButton:
                    text = 'Column'
            Form:
                Label:
                    text = 'Index'
                Field:
                    id: hist_index
                    value >> int(model.hist_row_index)

enamldef Main(MainWindow):
    id: main_window
    attr model
    attr xyplot_handler
    attr imageplot_handler
    attr pcaplot_handler
    attr script_selection = ScriptSelection({})
    
    Container:
        constraints = [
            
                hbox(left_view,tab_parent),
                
            ]
        Container:
            id: left_view
            constraints = [
                vbox(tv_area,control_panel),
                tv_area.height >= 200,
                tv_area.width >= 200,
                control_panel.width == tv_area.width,               
            ]
            TableView:
                id: tv_area
                item_model << model.table_model
                BaseSelectionModel:
                    id: bsm
                    #selection_behavior = 'columns'
            ControlPanel:
                id: control_panel
        TabGroup:
            id: tab_parent
            Tab:
                id: data_viz
                title = 'Data Visualization'
                TabGroup:
                    Tab:
                        id: x_vs_y
                        title = 'X vs Y'
                        Container:
                            constraints = [
                                hbox(
                                    vbox(x_vs_y_plot, grid_toggle),
                                    vbox(plot_properties_traits, plot_radiogroup,
                                         plot_name_form,add_xyplot_pb,
                                         plot_list_view,remove_selected_plots
                                         )
                                ),
                                plot_radiogroup.width == plot_properties_traits.width,
                                plot_name_form.width == plot_radiogroup.width
                            ]
                            EnableCanvas:
                                id: x_vs_y_plot
                                constraints = [
                                    256<=height<=512, 256<=width<=512
                                    ]
                                
                                component << xyplot_handler.container
                            TraitsUIItem:
                                id: plot_properties_traits
                                model = xyplot_handler
                            Form:
                                id: plot_radiogroup
                                Label:
                                    text = 'Plot Type'
                                RadioGroup:                                
                                    RadioButton:
                                        id: plot_type_disc
                                        text = 'Discrete'
                                        checked := xyplot_handler.plot_type_disc
                                    RadioButton:
                                        id: plot_type_cont
                                        text = 'Continuous'
                            Form:
                                id: plot_name_form
                                Label:
                                    text = 'Plot Name'
                                Field:
                                    id: plot_name
                                    value = ''
                            PushButton:
                                id: add_xyplot_pb
                                text = 'Plot From Selection'
                                clicked ::
                                    if xyplot_handler.AS_PANDAS_DATAFRAME:
                                        xyplot_handler.data_frame = model.data_frame
                                    xyplot_handler.selection_handler.current_selection = bsm.get_selection()
                                    xyplot_handler.selection_handler.create_selection()
                                    
                                    xyplot_handler.add_xyplot_selection(
                                        plot_name.value)
                                    plot_list_view.item_model = ListModel(
                                        xyplot_handler.plot_list_view.keys())
                            PushButton:
                                id: remove_selected_plots
                                text = 'Remove Selected Plots'
                                clicked ::
                                    xyplot_handler.remove_selected_plots(
                                        bsm_plotlist.get_selection()
                                    )
                                    plot_list_view.item_model = ListModel(
                                        xyplot_handler.plot_list_view.keys())
                            ListView:
                                id: plot_list_view
                                item_model = ListModel(
                                    xyplot_handler.plot_list_view.keys())
                                BaseSelectionModel:
                                    id: bsm_plotlist
                            CheckBox:
                                id: grid_toggle
                                text = 'Show Grid'
                                checked = True
                                toggled ::
                                    xyplot_handler.grid_toggle(
                                        grid_toggle.checked)
                                    
                        
                    Tab:
                        title = 'Image Plot'
                        Container:
                            constraints = [
                                hbox(image_plot, imageplot_pb)
                            ]
                            EnableCanvas:
                                id: image_plot
                                constraints = [
                                    height == 512,
                                    width == 512
                                ]
                                component << imageplot_handler.container
                            PushButton:
                                id: imageplot_pb
                                text = 'Use Selection'
                                clicked ::
                                    imageplot_handler.table = model.table
                                    imageplot_handler.selection_handler.current_selection = \
                                        bsm.get_selection()
                                    imageplot_handler.selection_handler.create_selection()
                                    
                                    imageplot_handler.draw_image_plot()
                                    imageplot_handler.selection_handler.flush()

                    Tab:
                        
                        title = 'PC Plot'
                        Container:
        
                            constraints = [
                                hbox(pca_plot_canvas, pcaplot_pb)
                            ]
                            
                            EnableCanvas:
                                id: pca_plot_canvas
                                constraints = [height==512, width==512]
                                component << pcaplot_handler.container
                            
                            PushButton:
                                id: pcaplot_pb
                                text = 'Use Selection'
                                clicked ::
                                    pcaplot_handler.table = model.table
                                    pcaplot_handler.selection_handler.current_selection = \
                                        bsm.get_selection()
                                    pcaplot_handler.draw_pc_plot()
                                    pcaplot_handler.selection_handler.flush()
                    Tab:
                        title = 'Histogram'
                        HistogramContainer:
                            id: hist_container
            Tab:
                id: data_analysis
                title = 'Data Analysis'
                TabGroup:
                    Tab:
                        title = 'Misc'
                        Container:
                            id: misc_ops
                            constraints = [vbox(params_form,params_pb)]
                            GroupBox:
                                id: params_form
                                Form:
                                    Label:
                                        text = 'Sum'
                                    Label:
                                        text << str(model.selection_sum)
                                    Label:
                                        text = 'Mean'
                                    Label:
                                        text << str(model.selection_mean)
                                    Label:
                                        text = 'Variance'
                                    Label:
                                        text << str(model.selection_var)
                                    Label:
                                        text = 'Standard Deviation'
                                    Label:
                                        text << str(model.selection_std)
                                    Label:
                                        text = 'Maximum'
                                    Label:
                                        text << str(model.selection_max)
                                    Label:
                                        text = 'Minimum'
                                    Label:
                                        text << str(model.selection_min)
                            PushButton:
                                id: params_pb
                                text = 'Use Selection'
                                clicked ::
                                    model.selection_handler.current_selection = bsm.get_selection()
                                    model.calculate_selection_params()
                                    

            Tab:
                id: other_ops_tab
                title = 'Other'
                Container:
                    constraints = [
                        vbox(hbox(sorting_ops,other_other),use_selection_other,
                             map_to_unique, norm_selection)
                    ]
                    GroupBox:
                        id: sorting_ops
                        title = 'Sort Rows / Columns'
                        Container:
                            constraints = [
                                hbox(vbox(row_col_sort_select,asc_desc_sort),
                                          sort_button)
                            ]
                            RadioGroup:
                                id: row_col_sort_select
                                RadioButton:
                                    text = 'Row'
                                RadioButton:
                                    text = 'Column'
                            RadioGroup:
                                id: asc_desc_sort
                                RadioButton:
                                    text = 'Ascending'
                                RadioButton:
                                    text = 'Descending'
                            PushButton:
                                id: sort_button
                                text = 'Sort'
                                clicked ::
                                    pass
                    GroupBox:
                        id: other_other
                        Form:
                            Label:
                                text = 'No. of Items'
                            Label:
                                text << str(model.column_length)
                            Label:
                                text = 'Unique Items'
                            Label:
                                text << str(model.unique_items_nos)
                    PushButton:
                        id: use_selection_other
                        text = 'Use Selection'
                        clicked ::
                            model.selection_handler.current_selection = \
                                bsm.get_selection()
                            model.string_ops()
                    PushButton:
                        id: map_to_unique
                        text = 'Map to Integers'
                        clicked ::
                            model.selection_handler.current_selection = \
                                bsm.get_selection()
                            model.map_to_unique()
                    PushButton:
                        id: norm_selection
                        text = 'Normalize Selection'
                        clicked ::
                            model.selection_handler.current_selection\
                                = bsm.get_selection()
                            model.normalize_selection()

                    
            Tab:
                title = 'Scripting'
                Container:
                    constraints = [
                        hbox(vbox(text_editor, use_selection_script,
                                  script_run_pb),
                        workspace_view)
                    ]
                    TextEditor:
                        id: text_editor
                    TableView:
                        id: workspace_view
                        item_model = model.workspace_handler
                    PushButton:
                        id: script_run_pb
                        text = 'Run'
                        clicked ::
                            model.script_handler.script = \
                                text_editor.get_text()
                            model.script_handler.exec_script()
                            model.workspace_handler = WorkspaceHandler(
                                model.script_handler.my_locals)
                            workspace_view.item_model = model.workspace_handler
                    PushButton:
                        id: use_selection_script
                        text = 'Use Selection'
                        clicked ::
                            model.selection_handler.current_selection = \
                                bsm.get_selection()
                            model.selection_handler.create_selection()
                            script_selection.selection_list = \
                                model.selection_handler.selected_indices
                            dlg = ConfigureSelection(
                                config_workspace=script_selection
                            )
                            dlg.show()
                            if dlg.result=='accepted':
                                pass
        
