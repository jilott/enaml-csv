# One of the possible layouts for the editor

import os
from enaml.stdlib.radio_group import RadioGroup
from add_plot_dialog import AddXYPlotDialog

enamldef Loader(Container):
    
    constraints = [
        hbox(lbl, fld, load_button),
        width == 500
        ]
    Label:
        id: lbl
        text = 'Filename'
    Field:
        id: fld
        value << model.filename
    PushButton:
        id: load_button
        text = 'Load'
        clicked::
            dlg = FileDialog(
                title = 'Load file',
                filters = ['CSV files (*.csv)'],
                directory = os.path.dirname(os.path.join('..','..','datasets','sample.csv'))
            )
            dlg.show()
            if dlg.result == 'accepted':
                model.filename = dlg.path


enamldef ControlPanel(Container):
    
    Loader:
        id: loader

enamldef PCAPlotContainer(Container):
    Container:
        constraints = [
            hbox(pca_plot_canvas, pca_control)
        ]
        EnableCanvas:
            id: pca_plot_canvas
            constraints = [height==512, width==512]
            component << model.pca_plot
        Container:
            id: pca_control
            Form:
                Label:
                    text = 'Top Left'
                Field:
                    id: top_left_pca
                    value << '0,0'
                Label:
                    text = 'Bottom Right'
                Field:
                    id: bottom_right_pca
                    value << '100,20'
            PushButton:
                text = 'Draw PC Plot'
                clicked ::
                    tp_left_inds = [
                        int(top_left_pca.value.split(',')[0]),
                        int(top_left_pca.value.split(',')[1])
                    ]
                    btm_right_inds = [
                        int(bottom_right_pca.value.split(',')[0]),
                        int(bottom_right_pca.value.split(',')[1])
                    ]
                    x = model.table[
                        tp_left_inds[0]:btm_right_inds[0],
                        tp_left_inds[1]:btm_right_inds[1]
                    ]
                    pc_red = model.pca.fit_transform(x)
                    model.pca_plotdata.set_data('x',pc_red[:,0])
                    model.pca_plotdata.set_data('y',pc_red[:,1])

enamldef Miscellaneous(Container):
    Container:
        constraints = [
            vbox(hbox(ops_rows, ops_columns), ops_blocks)
        ]
        GroupBox:
            
            id: ops_rows
#            constraints = [width==400]
            title = 'Operations on Row(s)'
            title_align = 'left'
            Form:
                Field:
                    id: misc_row_no
                    value << '0'
                PushButton:
                    id: pb_row
                    text = 'Calculate'
                    clicked ::
                        pass
                Label:
                    text = 'Mean'
                Label:
                    id: row_mean_result
                    text << str(model.table[:,int(misc_row_no.value)].mean())
                Label:
                    text = 'Variance'
                Label:
                    id: row_var_result
                    text << str(model.table[:,int(misc_row_no.value)].var())
                Label:
                    text = 'SD'
                Label:
                    id: row_sd_result
                    text << str(model.table[:,int(misc_row_no.value)].std())
        GroupBox:
            id: ops_columns
#            constraints = [width==ops_rows.width]
            title = 'Operations on Column(s)'
            title_align = 'left'
            Form:
                Field:
                    id: misc_col_no
                    value << '0'
                PushButton:
                    id: pb_row
                    text = 'Calculate'
                    clicked ::
                        pass
                Label:
                    text = 'Mean'
                Label:
                    text << str(model.table[int(misc_col_no.value),:].mean())
                Label:
                    text = 'Variance'
                Label:
                    text << str(model.table[int(misc_col_no.value),:].var())
                Label:
                    text = 'SD'
                Label:
                    text << str(model.table[int(misc_col_no.value),:].std())
        GroupBox:
            id: ops_blocks
            
            title = 'Operations on blocks of cells'
            title_align = 'left'
            Container:
                constraints = [
                    vbox(hbox(misc_block_indices, pb_misc_block),
                         misc_block_results)
                ]
                Form:
                    id: misc_block_indices
                    Label:
                        text = 'Top Left'
                    Field:
                        id: misc_block_topleft
                        value << '0,0'
                    Label:
                        text = 'Bottom Right'
                    Field:
                        id: misc_block_botright
                        value << '0,0'
                PushButton:
                    id: pb_misc_block
                    text = 'Calculate'
                    clicked ::
                        tp_left_inds = [
                            int(misc_block_topleft.value.split(',')[0]),
                            int(misc_block_topleft.value.split(',')[1])
                        ]
                        btm_right_inds = [
                            int(misc_block_botright.value.split(',')[0]),
                            int(misc_block_botright.value.split(',')[1])
                                        ]
                        
                        model.block_mean = model.table[
                            tp_left_inds[0]:btm_right_inds[0],
                            tp_left_inds[1]:btm_right_inds[1],
                        ].mean()
                        
                        model.block_var = model.table[
                            tp_left_inds[0]:btm_right_inds[0],
                            tp_left_inds[1]:btm_right_inds[1],
                        ].var()

                        model.block_std = model.table[
                            tp_left_inds[0]:btm_right_inds[0],
                            tp_left_inds[1]:btm_right_inds[1],
                        ].std()

                Form:
                    id: misc_block_results
                    Label:
                        text = 'Mean'
                    Label:
                        id: misc_block_mean
                        text << str(model.block_mean)
                    Label:
                        text = 'Variance'
                    Label:
                        id: misc_block_var
                        text << str(model.block_var)
                    Label:
                        text = 'SD'
                    Label:
                        id: misc_block_std
                        text << str(model.block_std)

enamldef HistogramContainer(Container):
    Container:
        constraints = [
            hbox(histogram_plot,hist_control)
        ]
        
        EnableCanvas:
            id: histogram_plot
            constraints = [
                width == 512,
                height == 512
            ]
            
            component << model.hist_plot
        Container:
            id: hist_control
            Slider:
                id: hist_nbins_slider
                minimum = 10
                maximum = 1000
                value >> int(model.hist_nbins)
            RadioGroup:
                id: hist_radio
                RadioButton:
                    text = 'Row'
                RadioButton:
                    text = 'Column'
            Form:
                Label:
                    text = 'Index'
                Field:
                    id: hist_index
                    value >> int(model.hist_row_index)

enamldef Main(MainWindow):
    
    attr model
    attr xyplot_handler
    
    Container:
        constraints = [
            
                vbox(hbox(vbox(tv_area,use_selection_pb),tab_parent), control_panel)
            
        ]

        TableView:
            id: tv_area
            constraints = [
                height <= 512,
                width <= 512
            ]
            item_model << model.table_model
            BaseSelectionModel:
                id: bsm
                selection_behavior = 'columns'
        PushButton:
            id: use_selection_pb
            text = 'Use Selection'
            clicked ::
                model.selection_handler.current_selection = bsm.get_selection()
                model.selection_handler.create_selection()
                # selection_handler.selected_indices contains the
                # indices for plotting
                model.use_selection_xyplot()
                model.selection_handler.flush()

        TabGroup:
            id: tab_parent
            Tab:
                id: data_viz
                title = 'Data Visualization'
                TabGroup:
                    Tab:
                        id: x_vs_y
                        title = 'X vs Y'
                        Container:
                            constraints = [
                                hbox(
                                    vbox(x_vs_y_plot, add_xyplot_pb),
                                    vbox(plot_properties_traits, plot_radiogroup)
                                )
                            ]
                            EnableCanvas:
                                id: x_vs_y_plot
                                constraints = [256<=height<=512, 256<=width<=512]
                                
                                component << xyplot_handler.container
                            TraitsUIItem:
                                id: plot_properties_traits
                                model = xyplot_handler
                            RadioGroup:
                                id: plot_radiogroup
                                RadioButton:
                                    id: plot_type_disc
                                    text = 'Discrete'
                                    checked := xyplot_handler.plot_type_disc
                                RadioButton:
                                    id: plot_type_cont
                                    text = 'Continuous'
                            
                            PushButton:
                                id: add_xyplot_pb
                                text = 'Use Selection'
                                clicked ::
                                    xyplot_handler.table = model.table
                                    xyplot_handler.selection_handler.current_selection = bsm.get_selection()
                                    xyplot_handler.selection_handler.create_selection()
                                    xyplot_handler.add_xyplot_selection()
                                    
                        
                    Tab:
                        title = 'Image Plot'
                        Container:
                            constraints = [
                                hbox(image_plot, image_plot_control)
                            ]
                            EnableCanvas:
                                id: image_plot
                                constraints = [
                                    height == 512,
                                    width == 512
                                ]
                                component << model.image_plot
                            Container:
                                id: image_plot_control
                                Form:
                                    Label:
                                        text = 'Top Left'
                                    Field:
                                        id: image_top_left
                                        value << '0,0'
                                    Label:
                                        text = 'Bottom right'
                                    Field:
                                        id: image_bottom_right
                                        value << str(model.table.shape[0])+ \
                                                 ','+str(model.table.shape[1])
                                PushButton:
                                    text = 'Draw Plot'
                                    clicked ::
                                        tp_left_inds = [
                                            int(image_top_left.value.split(',')[0]),
                                            int(image_top_left.value.split(',')[1])
                                        ]
                                        btm_right_inds = [
                                            int(image_bottom_right.value.split(',')[0]),
                                            int(image_bottom_right.value.split(',')[1])
                                        ]
                                        model.img_plotdata.set_data('imagedata',
                                                                model.table[
                                            tp_left_inds[0]:btm_right_inds[0],
                                            tp_left_inds[1]:btm_right_inds[1]
                                            ])
                    Tab:
                        
                        title = 'PC Plot'
                        PCAPlotContainer:
                            id: pca_plot_container
                    Tab:
                        title = 'Histogram'
                        HistogramContainer:
                            id: hist_container
            Tab:
                id: data_analysis
                title = 'Data Analysis'
                TabGroup:
                    Tab:
                        title = 'Misc'
                        Miscellaneous:
                            id: misc_ops
            #        Tab:
            #            title = 'Clustering'
            #            KMeansContainer:
            #                id: kmeans_container
            #        Tab:
            #            SpectrogramContainer:
            #                id: spectrum_container
            Tab:
                id: other_ops_tab
                title = 'Other'
                Container:
                    GroupBox:
                        id: sorting_ops
                        title = 'Sort Rows / Columns'
                        Container:
                            constraints = [
                                hbox(vbox(row_col_sort_select,asc_desc_sort),
                                          sort_button)
                            ]
                            RadioGroup:
                                id: row_col_sort_select
                                RadioButton:
                                    text = 'Row'
                                RadioButton:
                                    text = 'Column'
                            RadioGroup:
                                id: asc_desc_sort
                                RadioButton:
                                    text = 'Ascending'
                                RadioButton:
                                    text = 'Descending'
                            PushButton:
                                id: sort_button
                                text = 'Sort'
                                clicked ::
                                    pass
                            #TableView:
                            #    id: sorted_tv
                    
                
        ControlPanel:
            id: control_panel