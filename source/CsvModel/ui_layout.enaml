from viz_widgets.dialogs import (
    TimestampParserDialog, ConfigureSelection, ClearHistoryWarning
)
from csv_widgets import (
    WorkspaceViewer, Loader, ToolsPanel
)
from viz_widgets.image_plotter import ImagePlotter
from viz_widgets.xy_plotter import XYPlotter
from viz_widgets.pc_plotter import PCPlotter
from viz_widgets.histogram_plotter import HistogramPlotter
from viz_widgets.stat_moments import StatsCalculator
from viz_widgets.regression_plotter import RegressionPlotter
from viz_widgets.kmeans_plotter import KMeansPlotter
from viz_widgets.spreadsheet_ops import SpreadsheetOps
from viz_widgets.script_widget import ScriptingTool
from viz_widgets.workspace_handler import WorkspaceHandler
from enaml.stdlib.radio_group import RadioGroup
from enaml.stdlib.fields import IntField
from enaml.stdlib.list_model import ListModel
import os



enamldef MainUI(Container):


    
    Container:
        constraints = [
            
                hbox(vbox(tools_properties,left_view),tab_parent),
                
            ]
        ToolsPanel:
            
            id: tools_properties
            table_view := tv_area
            selection_model := bsm
          
            
        TabGroup:
            id: left_view
            Tab:
                title << model.filename.split('/')[len(model.filename.split('/'))-1]
                constraints = [
                    vbox(tv_area,control_panel),
                    512>=tv_area.height >= 200,
                    512>=tv_area.width >= 200,
                    control_panel.width == tv_area.width,               
                ]
                TableView:
                    id: tv_area
                    item_model << model.table_model
                    BaseSelectionModel:
                        id: bsm
                        #selection_behavior = 'columns'
                
                Loader:
                    id: control_panel
            Tab:
                title = 'Workspace'
                WorkspaceViewer:
                    id: workspace_area
                    work << model.workspace_handler
                    icons_dict = model.icons_dict
        TabGroup:
            id: tab_parent

            Tab:
                id: data_viz
                title = 'Data Visualization'
                TabGroup:
                    
                    Tab:    
                        title = 'X vs Y'
                        XYPlotter:
                            plot_model = model
                            plot_handler = xyplot_handler
                            sel_model = bsm
                        
                    Tab:
                        title = 'Image Plot'
                        ImagePlotter:
                            plot_handler = imageplot_handler
                            sel_model = bsm

                    Tab:
                        
                        title = 'PC Plot'
                        PCPlotter:
                            sel_model = bsm
                            plot_model = model
                            plot_handler = pcaplot_handler

                    Tab:
                        title = 'Histogram'
                        HistogramPlotter:
                            plot_handler = histplot_handler
                            plot_model = model
                            sel_model = bsm

            Tab:
                id: data_analysis
                title = 'Data Analysis'
                TabGroup:
                    Tab:
                        title = 'Descriptive Stats'
                        StatsCalculator:
                            sample_model = model
                            sel_model = bsm

                    Tab:
                        title = 'Regression'
                        RegressionPlotter:
                            plot_handler = regressplot
                            plot_model = model
                            sel_model = bsm

                    Tab:
                        title = 'K-means Clustering'
                        KMeansPlotter:
                            plot_handler = kmeans_plot
                            plot_model = model

            Tab:
                id: other_ops_tab
                title = 'Other'
                SpreadsheetOps:
                    sample_model = model
                    sel_model = bsm
                
            Tab:
                title = 'Scripting'
                ScriptingTool:
                    data_model = model
                    sel_model_table = bsm
                    work_area = workspace_area
                #    sel_model_wksp = wksp_bsm

            Tab:
                title = 'Machine Learning'
                TabGroup:
                    Tab:
                        title = 'Text Processing'
        
                        Container:
                            
                            GroupBox:
                                id: text_class_gb
                                constraints = [
                                    hbox(simple_class_params,vbox(tfidf_pb,train_class_pb,
                                         test_class_pb, save_classifier_pb,
                                         load_classifier_pb, make_prediction_pb))
                                ]
                                title = 'Text Classification'
                                Form:
                                    id: simple_class_params
                                    constraints = [
                                        width <= 300
                                    ]
                                    Label:
                                        text = 'Select Classifier'
                                    ComboBox:
                                        id: classifier_select_list
                                        items = text_class.classifier_dict.keys()
                                        value >> text_class.classifier_select
                                    Label:
                                        text = 'Training Data Length'
                                    Field:
                                        value := text_class.train_length
                                    Label:
                                        text = 'Target Column'
                                    Field:
                                        value := text_class.target_col_no
                                    Label:
                                        text = 'Classifier Score'
                                    Label:
                                        #constraints = [width==classifier_select_list.width]
                                        text << str(text_class.classifier_score)
                                    Label:
                                        text = 'Status'
                                    Label:
                                        id: stat_label
                                PushButton:
                                    id: tfidf_pb
                                    text = 'Tokenize - Bag of Words'
                                    clicked ::
                                        text_class.selection_handler.current_selection = \
                                            bsm.get_selection()
                                        text_class.data_frame = model.data_frame
                                        text_class.create_dataset()
                                        text_class.text_vectorize()
                                        stat_label.text = 'Data vectorized'
            
                                PushButton:
                                    id: train_class_pb
                                    text = 'Train Classifier'
                                    clicked ::
                                        text_class.select_classifier()
                                        text_class.train_classifier()
                                        stat_label.text = 'Classifier Trained'
                                PushButton:
                                    id: test_class_pb
                                    text = 'Test Classifier'
                                    clicked ::
                                        text_class.test_classifier()
                                        stat_label.text = 'Classifier Tested'
                                PushButton:
                                    id: save_classifier_pb
                                    text = 'Save Classifier'
                                    icon = model.icons_dict['save']
                                    clicked ::
                                        dlg = FileDialog(
                                            mode = 'save',
                                            title = 'Save Classifier',
                                            filters = ['Pickle files (*.pkl)'],
                                            directory = os.path.dirname(
                                            os.path.join('..','..','datasets','sample.csv'))
                                        )
                                        dlg.show()
                                        if dlg.result == 'accepted':
                                            text_class.save_classifier(dlg.path)
                                            stat_label.text = 'Classifier Saved'
                                        
                                PushButton:
                                    id: load_classifier_pb
                                    text = 'Load Classifier'
                                    icon = model.icons_dict['load']
                                    clicked ::
                                        dlg = FileDialog(
                                            mode = 'open',
                                            title = 'Load Classifier',
                                            filters = ['Pickle files (*.pkl)'],
                                            directory = os.path.dirname(
                                            os.path.join('..','..','datasets','sample.csv'))
                                        )
                                        dlg.show()
                                        if dlg.result == 'accepted':
                                            text_class.load_classifier(dlg.path)
                                            stat_label.text = 'Classifier Loaded'
                                PushButton:
                                    id: make_prediction_pb
                                    text = 'Make Prediction'
                                    clicked ::
                                        text_class.data_frame = model.data_frame
                                        text_class.selection_handler.current_selection = \
                                            bsm.get_selection()
                                        
                                        text_class.make_prediction()
                                        model.data_frame['Prediction']= \
                                            text_class.prediction
                                        model.redraw_tablemodel()
                    Tab:
                        title = 'Evaluation'
                        Container:
                            constraints = [hbox(estimators_gb, sklearn_control)]
                            GroupBox:
                                id: estimators_gb
                                title = 'Sklearn Estimators'
                                GroupBox:
                                    id: linear_estimators_gb
                                    title = 'Linear Estimators'
                                    RadioGroup:
                                        orientation = 'vertical'
                                        items << ml_evaluator.linear_estimator_list
                            GroupBox:
                                id: sklearn_control
                                title = 'Control Panel'
                                Form:
                                    Label:
                                        text = 'Target Column(s)'
                                    IntField:
                                        id: target_col
                                        value := ml_evaluator.target_col