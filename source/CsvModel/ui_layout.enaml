from viz_widgets.dialogs import (
    TimestampParserDialog, ConfigureSelection, ClearHistoryWarning
)
from csv_widgets import (
    WorkspaceViewer, Loader, ToolsPanel
)
from viz_widgets.image_plotter import ImagePlotter
from viz_widgets.xy_plotter import XYPlotter
from viz_widgets.pc_plotter import PCPlotter
from viz_widgets.histogram_plotter import HistogramPlotter
from viz_widgets.stat_moments import StatsCalculator
from viz_widgets.regression_plotter import RegressionPlotter
from viz_widgets.kmeans_plotter import KMeansPlotter
from viz_widgets.spreadsheet_ops import SpreadsheetOps
from viz_widgets.script_widget import ScriptingTool
from workspace_handler import WorkspaceHandler
from enaml.stdlib.radio_group import RadioGroup
from enaml.stdlib.fields import IntField
from enaml.stdlib.list_model import ListModel
import os



enamldef MainUI(Container):


    
    Container:
        constraints = [
            
                hbox(vbox(tools_properties,left_view),tab_parent),
                
            ]
        ToolsPanel:
            
            id: tools_properties
            table_view := tv_area
            selection_model := bsm
          
            
        TabGroup:
            id: left_view
            Tab:
                title << model.filename.split('/')[len(model.filename.split('/'))-1]
                constraints = [
                    vbox(tv_area,control_panel),
                    512>=tv_area.height >= 200,
                    512>=tv_area.width >= 200,
                    control_panel.width == tv_area.width,               
                ]
                TableView:
                    id: tv_area
                    item_model << model.table_model
                    BaseSelectionModel:
                        id: bsm
                        #selection_behavior = 'columns'
                
                Loader:
                    id: control_panel
            Tab:
                title = 'Workspace'
                WorkspaceViewer:
                    id: workspace_area
                    work << model.workspace_handler
                    icons_dict = model.icons_dict
        TabGroup:
            id: tab_parent

            Tab:
                id: data_viz
                title = 'Data Visualization'
                TabGroup:
                    
                    Tab:    
                        title = 'X vs Y'
                        XYPlotter:
                            plot_model = model
                            plot_handler = xyplot_handler
                            sel_model = bsm
                        
                    Tab:
                        title = 'Image Plot'
                        ImagePlotter:
                            plot_handler = imageplot_handler
                            sel_model = bsm

                    Tab:
                        
                        title = 'PC Plot'
                        PCPlotter:
                            sel_model = bsm
                            plot_model = model
                            plot_handler = pcaplot_handler

                    Tab:
                        title = 'Histogram'
                        HistogramPlotter:
                            plot_handler = histplot_handler
                            plot_model = model
                            sel_model = bsm

            Tab:
                id: data_analysis
                title = 'Data Analysis'
                TabGroup:
                    Tab:
                        title = 'Descriptive Stats'
                        StatsCalculator:
                            sample_model = model
                            sel_model = bsm

                    Tab:
                        title = 'Regression'
                        RegressionPlotter:
                            plot_handler = regressplot
                            plot_model = model
                            sel_model = bsm

                    Tab:
                        title = 'K-means Clustering'
                        KMeansPlotter:
                            plot_handler = kmeans_plot
                            plot_model = model

            Tab:
                id: other_ops_tab
                title = 'Other'
                SpreadsheetOps:
                    sample_model = model
                    sel_model = bsm
                
            Tab:
                title = 'Scripting'
                ScriptingTool:
                    data_model = model
                    sel_model_table = bsm
                    work_area = workspace_area
                #    sel_model_wksp = wksp_bsm
                #Container:
                #    constraints = [
                #        hbox(vbox(text_editor,cmd_line_form, script_tbar),
                #             vbox(add_script_result,
                #                  cmd_hist_label, command_hist_view))
                #    ]
                #    TextEditor:
                #        id: text_editor
                #    Form:
                #        id: add_script_result
                #        
                #        RadioGroup:
                #            id: as_row_col
                #            items = ['As Row', 'As column']
                #            orientation = 'vertical'
                #        PushButton:
                #            text = 'Add to Table'
                #            clicked ::
                #                model.selection_handler.current_selection = \
                #                    wksp_bsm.get_selection()
                #                model.add_row_col(as_row_col.selected_label)
                #    Label:
                #        id: cmd_hist_label
                #        text = 'Command History'
                #    ListView:
                #        id: command_hist_view
                #        item_model = ListModel(
                #            model.script_handler.command_history
                #        )
                #        BaseSelectionModel:
                #            selection_mode = 'extended'
                #        activated ::
                #            model.script_handler.exec_single_line(event)
                #            command_hist_view.item_model = ListModel(
                #                model.script_handler.command_history
                #            )
                #            #workspace_view.item_model = model.workspace_handler
                #    Form:
                #        id: cmd_line_form
                #        Label:
                #            text = 'Enter Command'
                #        Field:
                #            id: cmd_input
                #            return_pressed ::
                #                org_text = text_editor.get_text()
                #                text_editor.set_text(
                #                    org_text+cmd_input.value+'\n')
                #                model.script_handler.script = cmd_input.value
                #                model.script_handler.exec_script()
                #                model.workspace_handler = WorkspaceHandler(
                #                    model.script_handler.my_locals
                #                )
                #               # workspace_view.item_model = model.workspace_handler
                #                model.script_handler.command_history.append(
                #                    cmd_input.value
                #                )
                #                command_hist_view.item_model = ListModel(
                #                    model.script_handler.command_history
                #                )
                #                cmd_input.value = ''
                #
                #    ToolBar:
                #        id: script_tbar
                #        #Form:
                #        #    id: script_control
                #            
                #        PushButton:
                #            id: use_selection_script
                #            text = 'Use Selection'
                #            clicked ::
                #                model.selection_handler.current_selection = \
                #                    bsm.get_selection()
                #                model.selection_handler.create_selection()
                #                script_selection.selection_list = \
                #                    model.selection_handler.selected_indices
                #                script_selection.create_selection_dict()
                #                dlg = ConfigureSelection(
                #                    config_workspace=script_selection
                #                )
                #                dlg.show()
                #                if dlg.result=='accepted':
                #                    var_dict = script_selection.add_to_workspace()
                #                    model.add_uservariables(var_dict)
                #                    #workspace_view.item_model = model.workspace_handler
                #                    script_selection.flush()
                #                    model.selection_handler.flush()
                #        PushButton:
                #            id: script_run_pb
                #            constraints = [height==use_selection_script.height,
                #                           width==use_selection_script.width]
                #            icon = model.icons_dict['run']
                #            clicked ::
                #                model.script_handler.script = \
                #                    text_editor.get_text()
                #                model.script_handler.exec_script()
                #                model.workspace_handler = WorkspaceHandler(
                #                    model.script_handler.my_locals)
                #                #workspace_view.item_model = model.workspace_handler
                #                workspace_area.work = model.workspace_handler
                #                #print workspace_area.work
                #                t = text_editor.get_text().split('\n')
                #                for statement in t:
                #                    model.script_handler.command_history.append(
                #                        statement
                #                    )
                #                command_hist_view.item_model = ListModel(
                #                    model.script_handler.command_history
                #                )
                #        PushButton:
                #            text = 'Clear History'
                #            icon = model.icons_dict['delete']
                #            clicked ::
                #                dlg = ClearHistoryWarning()
                #                dlg.show()
                #                if dlg.result == 'accepted':
                #                    model.script_handler.clear_history()
                #                    command_hist_view.item_model = ListModel([])
                #        PushButton:
                #            icon = model.icons_dict['indent']
                #            clicked ::
                #                indented = model.increase_indent(
                #                    text_editor.selected_text)
                #
                #                text_editor.insert(indented)
                #        PushButton:
                #            icon = model.icons_dict['dedent']
                #            clicked ::
                #                model.decrease_indent(
                #                    text_editor.selected_text
                #                )
                #        PushButton:
                #            icon = model.icons_dict['save']
                #            clicked ::
                #                dlg = FileDialog(
                #                    mode = 'save',
                #                    title = 'Save Script',
                #                    filters = ['Python files (*.py)'],
                #                    directory = os.path.dirname(
                #                        os.path.join(
                #                            '..','..','datasets','sample.csv')
                #                ))
                #                dlg.show()
                #                if dlg.result == 'accepted':
                #                    model.script_handler.save_script(
                #                        text_editor.get_text(),dlg.path)
                #        PushButton:
                #            icon = model.icons_dict['load']
                #            clicked ::
                #                dlg = FileDialog(
                #                    mode = 'open',
                #                    title = 'Load Script',
                #                    filters = ['Python files (*.py)'],
                #                    directory = os.path.dirname(
                #                        os.path.join(
                #                            '..','..','datasets','sample.csv')
                #                ))
                #                dlg.show()
                #                if dlg.result == 'accepted':
                #                    script = \
                #                    model.script_handler.load_script(dlg.path)
                #                    text_editor.set_text(script)
            
            Tab:
                title = 'Machine Learning'
                TabGroup:
                    Tab:
                        title = 'Text Processing'
        
                        Container:
                            
                            GroupBox:
                                id: text_class_gb
                                constraints = [
                                    hbox(simple_class_params,vbox(tfidf_pb,train_class_pb,
                                         test_class_pb, save_classifier_pb,
                                         load_classifier_pb, make_prediction_pb))
                                ]
                                title = 'Text Classification'
                                Form:
                                    id: simple_class_params
                                    constraints = [
                                        width <= 300
                                    ]
                                    Label:
                                        text = 'Select Classifier'
                                    ComboBox:
                                        id: classifier_select_list
                                        items = text_class.classifier_dict.keys()
                                        value >> text_class.classifier_select
                                    Label:
                                        text = 'Training Data Length'
                                    Field:
                                        value := text_class.train_length
                                    Label:
                                        text = 'Target Column'
                                    Field:
                                        value := text_class.target_col_no
                                    Label:
                                        text = 'Classifier Score'
                                    Label:
                                        #constraints = [width==classifier_select_list.width]
                                        text << str(text_class.classifier_score)
                                    Label:
                                        text = 'Status'
                                    Label:
                                        id: stat_label
                                PushButton:
                                    id: tfidf_pb
                                    text = 'Tokenize - Bag of Words'
                                    clicked ::
                                        text_class.selection_handler.current_selection = \
                                            bsm.get_selection()
                                        text_class.data_frame = model.data_frame
                                        text_class.create_dataset()
                                        text_class.text_vectorize()
                                        stat_label.text = 'Data vectorized'
            
                                PushButton:
                                    id: train_class_pb
                                    text = 'Train Classifier'
                                    clicked ::
                                        text_class.select_classifier()
                                        text_class.train_classifier()
                                        stat_label.text = 'Classifier Trained'
                                PushButton:
                                    id: test_class_pb
                                    text = 'Test Classifier'
                                    clicked ::
                                        text_class.test_classifier()
                                        stat_label.text = 'Classifier Tested'
                                PushButton:
                                    id: save_classifier_pb
                                    text = 'Save Classifier'
                                    icon = model.icons_dict['save']
                                    clicked ::
                                        dlg = FileDialog(
                                            mode = 'save',
                                            title = 'Save Classifier',
                                            filters = ['Pickle files (*.pkl)'],
                                            directory = os.path.dirname(
                                            os.path.join('..','..','datasets','sample.csv'))
                                        )
                                        dlg.show()
                                        if dlg.result == 'accepted':
                                            text_class.save_classifier(dlg.path)
                                            stat_label.text = 'Classifier Saved'
                                        
                                PushButton:
                                    id: load_classifier_pb
                                    text = 'Load Classifier'
                                    icon = model.icons_dict['load']
                                    clicked ::
                                        dlg = FileDialog(
                                            mode = 'open',
                                            title = 'Load Classifier',
                                            filters = ['Pickle files (*.pkl)'],
                                            directory = os.path.dirname(
                                            os.path.join('..','..','datasets','sample.csv'))
                                        )
                                        dlg.show()
                                        if dlg.result == 'accepted':
                                            text_class.load_classifier(dlg.path)
                                            stat_label.text = 'Classifier Loaded'
                                PushButton:
                                    id: make_prediction_pb
                                    text = 'Make Prediction'
                                    clicked ::
                                        text_class.data_frame = model.data_frame
                                        text_class.selection_handler.current_selection = \
                                            bsm.get_selection()
                                        
                                        text_class.make_prediction()
                                        model.data_frame['Prediction']= \
                                            text_class.prediction
                                        model.redraw_tablemodel()
                    Tab:
                        title = 'Evaluation'
                        Container:
                            constraints = [hbox(estimators_gb, sklearn_control)]
                            GroupBox:
                                id: estimators_gb
                                title = 'Sklearn Estimators'
                                GroupBox:
                                    id: linear_estimators_gb
                                    title = 'Linear Estimators'
                                    RadioGroup:
                                        orientation = 'vertical'
                                        items << ml_evaluator.linear_estimator_list
                            GroupBox:
                                id: sklearn_control
                                title = 'Control Panel'
                                Form:
                                    Label:
                                        text = 'Target Column(s)'
                                    IntField:
                                        id: target_col
                                        value := ml_evaluator.target_col