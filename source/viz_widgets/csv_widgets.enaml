from enaml.backends.qt.noncomponents.qt_icon import QtIcon
from enaml.stdlib.radio_group import RadioGroup
from dialogs import NavigatorDialog
from compatibility_check import CompatibilityChecker
import os

enamldef WorkspaceViewer(Container):

    attr work << model.workspace_handler
    constraints = [vbox(tv, tb)]
    TableView:
        id: tv
        item_model << work
    ToolBar:
        id: tb
        PushButton:
            icon = QtIcon().from_file(
                os.path.join('viz_widgets','Icons','save.png')
            )
            clicked ::
                dlg = FileDialog(
                    mode = 'save',
                    title = 'Save .mat file',
                    filters = ['MAT files (*.mat)'],
                    directory = os.path.dirname(
                        os.path.join('..','datasets','sample.csv')
                ))
                dlg.show()
                if dlg.result == 'accepted':
                    model.save_workspace(dlg.path)
        PushButton:
            icon = QtIcon().from_file(
                os.path.join('viz_widgets','Icons','load.png')
            )
            clicked ::
                dlg = FileDialog(
                    mode = 'open',
                    title = 'Load .mat file',
                    filters = ['MAT files (*.mat)'],
                    directory = os.path.dirname(
                        os.path.join('..','..','datasets','sample.csv')
                ))
                dlg.show()
                if dlg.result == 'accepted':
                    model.load_workspace(dlg.path)
                    tv.item_model = work
        PushButton:
            icon = QtIcon().from_file(
                os.path.join('viz_widgets','Icons','cross.gif')
            )

enamldef Loader(Container):
    
    constraints = [
        vbox(loader_form, tbar),
        width == 500
        ]
    
    Form:
        id: loader_form
        Label:
            text = 'Filename'
        
        Field:
            value << model.filename
    
    ToolBar:
        id: tbar
        
        RadioGroup:
            id: data_type_rb
            RadioButton:
                id: as_pandas
                text = 'As Pandas DataFrame'
                checked := model.AS_PANDAS_DATAFRAME
            RadioButton:
                id: as_nparray
                text = 'As numpy.ndarray'
                
        PushButton:
            id: load_button
            
            icon = QtIcon().from_file(
                os.path.join('viz_widgets','Icons','load.png')
            )
            clicked::
                dlg = FileDialog(
                    title = 'Load file',
                    filters = ['CSV files (*.csv)'],
                    directory = os.path.dirname(
                        os.path.join('..','datasets','sample.csv'))
                    
                )
                dlg.show()
                if dlg.result == 'accepted':
                    model.filename = dlg.path
                    xyplot_handler.AS_PANDAS_DATAFRAME = model.AS_PANDAS_DATAFRAME
        PushButton:
            id: save_button
            icon = QtIcon().from_file(
                os.path.join('viz_widgets','Icons','save.png')
            )
            clicked ::
                dlg = FileDialog(
                    title = 'Save file',
                    mode = 'save',
                    filters = ['CSV (*.csv)'],
                    directory = os.path.dirname(
                        os.path.join('..','..','datasets','sample.csv'))
                    )
                dlg.show()
                if dlg.result == 'accepted':
                    model.save_filename = dlg.path
                    model.save_as()
    
        
    
        PushButton:
            id: add_another_csv_pb
            constraints = [height==save_button.height,
                           width == 30]
            text = '+'
            clicked ::
                pass

enamldef ToolsPanel(Form):
    attr table_view
    attr selection_model
    attr compatibility = CompatibilityChecker()
    Form:
        Label:
            text = 'Tools:'
        ToolBar:
            PushButton:
                icon = QtIcon().from_file(
                    os.path.join('viz_widgets','Icons','bold.png')
                )
            PushButton:
                icon = QtIcon().from_file(
                    os.path.join('viz_widgets','Icons','italic.png')
                )
            PushButton:
                icon = QtIcon().from_file(
                    os.path.join('viz_widgets','Icons','under.png')
                )
            PushButton:
                icon = QtIcon().from_file(
                    os.path.join('viz_widgets','Icons','cut.png')
                )
            PushButton:
                icon = QtIcon().from_file(
                    os.path.join('viz_widgets','Icons','copy.gif')
                )
            PushButton:
                icon = QtIcon().from_file(
                    os.path.join('viz_widgets','Icons','paste.png')
                )
            PushButton:
                icon = QtIcon().from_file(
                    os.path.join('viz_widgets','Icons','undo.png')
                )
            PushButton:
                icon = QtIcon().from_file(
                    os.path.join('viz_widgets','Icons','redo.png')
                )
            PushButton:
                icon = QtIcon().from_file(
                    os.path.join('viz_widgets','Icons','navigator.png')
                )
                clicked ::
                    dlg = NavigatorDialog()
                    dlg.show()
                    if dlg.result == 'accepted':
                        selection = model.set_table_selection(dlg.row, dlg.col)
                        selection_model.set_selection(selection)
            PushButton:
                text = 'Use Selection'
                clicked ::
                    compatibility.AS_DATAFRAME = model.AS_PANDAS_DATAFRAME
                    compatibility.selection = selection_model.get_selection()